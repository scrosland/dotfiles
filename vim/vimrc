" --- Basics ---

set nocompatible
set redraw        " vi only

if has("eval")
    " Debugging
    "
    " Run the folowing to enable debug messages.
    "
    " vim --cmd 'let g:vimrc_debug=1' ...
    let g:vimrc_debug = get(g:, 'vimrc_debug', 0)
    function! VimrcDebug(...)
        if g:vimrc_debug
            execute "echo '" . join(a:000, ' ') . "'"
        endif
    endfunction
    command! -nargs=* -bar VimrcDebug call VimrcDebug(<args>)
    VimrcDebug 'vimrc debugging enabled'

    " Debugging on Windows: uncomment the next line to preserve cmd.exe windows
    " after commands finish in order to see what the output was. Useful for
    " diagnosing git errors.
    "
    " set shellcmdflag=/k
endif

if has("eval")
    " Move leader to something I can type
    let mapleader="'"
    let maplocalleader="'"
endif

set visualbell
set noerrorbells
set noshowmode

set autoindent
set smartindent

set shiftwidth=4
set softtabstop=4

set notextmode
set expandtab
set smarttab

set ignorecase
set smartcase

set pastetoggle=<F10>

set path=.,,**

" disable screen restoration on exit
set norestorescreen
set t_ti=
set t_te=

if &t_Co == 16
    if &term == "xterm-debian" || &term == "gnome-terminal"
        " gnome-terminal has broken detection :(
        set t_Co=256
    endif
endif
if &term == "xterm" && exists("$TERMINATOR_UUID")
    " gnome terminator is also sometimes broken
    set term=xterm-256color
    set t_Co=256
endif

if has("multi_byte")
    " UI encoding
    set encoding=utf-8
    " encoding detection
    set fileencodings=ucs-bom,utf-8,default,latin1
    " default for new files
    setglobal fileencoding=utf-8
    "set listchars=eol:¶
    "set listchars=eol:⟸
    "set listchars=eol:⤆
    "set listchars=eol:§
    "set listchars=eol:←
    set listchars=eol:↵
endif
set listchars+=extends:>,precedes:<

" highlight search and a mapping to hide the highlight
set incsearch
set hlsearch
nnoremap <Leader>q :silent nohlsearch<CR>

" disable :X encryption
nnoremap :X :echo "Encryption disabled"<CR>

" Bail out if this is a very old version of Vim
if has("eval") && v:version < 704
    finish
endif

" include the rest of startup if this looks like a reasonable version.
let s:continuation = resolve(expand("<sfile>:p").".2.vim")
if filereadable(s:continuation)
    execute "source " . s:continuation
endif
