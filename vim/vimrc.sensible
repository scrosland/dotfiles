" --- Basic configuration for sensible vim builds ---
"
" The rest of startup for builds of vim with sensible features.

if !has("eval")
    " This is likely to be Debian's vim-tiny or an ancient version
    " either way trying anything 'clever' would be pointless.
    throw "Missing 'eval' feature - bailing out!"
    finish
endif

syntax on
filetype on
filetype plugin on
filetype indent off

" --- System Detection ---

function! s:getSystemType()
    if has("win32") || has("win64")
        return "windows"
    endif
    if has("mac") || has("macunix") || has("gui_macvim")
        return "osx"
    endif
    if has("unix")
        " case insensitive regex comparison
        let l:uname = system("uname -a")
        if l:uname =~? "Darwin"
            return "osx"
        elseif l:uname =~? "Microsoft" || isdirectory("/mnt/c/Windows")
            return "wsl"
        else
            return "unix"
        endif
    endif
    throw "s:getSystemType(): unknown system type"
endfunction

let g:system_type = s:getSystemType()
let g:is_osx      = (g:system_type == "osx")
let g:is_unix     = (g:system_type == "unix" || g:system_type == "wsl")
let g:is_windows  = (g:system_type == "windows")
let g:is_wsl      = (g:system_type == "wsl")
lockvar g:system_type g:is_osx g:is_unix g:is_windows g:is_wsl

function! s:find_directories(choices)
    return filter(copy(a:choices), 'isdirectory(expand(v:val))')
endfunction

function! s:source_if_readable(filename)
    let l:filename = expand(a:filename)
    if filereadable(l:filename)
        execute "source " . l:filename
        return 1
    endif
    return 0
endfunction

" --- MS Windows ---

if g:is_windows
    " Get the system defaults
    call s:source_if_readable("$VIMRUNTIME/mswin.vim")

    " Find a temporary directory for swap files.
    function! s:configure_temp_directory()
        let l:defaults = ['c:\tmp', 'c:\temp']
        let l:directories = s:find_directories(l:defaults)
        if empty(l:directories)
            echom "Cannot find any of " .
                    \ string(l:defaults) . ": directory is unset!"
            5 sleep
        else
            let &directory=join(l:directories, ",")
        end
    endfunction
    call s:configure_temp_directory()

    " Don't save viminfo files
    set viminfo=""
endif

" --- Value added settings (spelling, tags, etc.) ---

set background=light
set mousehide
" behaviour is overridden in gvimrc
behave xterm

if executable("sgrep")
    set grepprg=sgrep
elseif executable("rg")
    set grepprg=rg\ --vimgrep
endif

" Clipboard, select mode and mouse settings need to be after sourcing mswin.vim
if !has("mac")
    " On macOS autoselect usually results in me pasting the wrong thing.
    " Instead use Option-click to cut/paste from/to the system clipboard.
    set clipboard+=autoselect
endif
" Disable the awful Select mode
set selectmode=""
" Mouse in normal, visual, command and prompts.
" Visual has to be included otherwise drag to select does not work.
set mouse=nvcr

" Digraphs - CTRL-K plus two characters
if has("digraphs") && has("multi_byte")
    " EN DASH U+2013
    digraphs n- 8211
    " EM DASH U+2014
    digraphs m- 8212
endif

if has("wildmenu")
    " Improved wildcard expansion.
    " First <tab> populates with longest match, and pops up a menu if needed.
    " Second <tab> selects first thing in menu.
    " <C-N> and <C-P> navigate the menu.
    if exists("+wildignorecase")
        set wildignorecase
    endif
    let s:suffixes = [
                \ ".a",
                \ ".d2",
                \ ".dll",
                \ ".exe",
                \ ".lib",
                \ ".o",
                \ ".so",
                \ ]
    for s:suffix in s:suffixes
        execute 'set wildignore+=*' . s:suffix
    endfor
    set wildmenu
    set wildmode=longest:full,full
endif

" Spell checking
set spelllang=en_gb
if exists('+spelloptions')
    " patch-8.2.0953 adds spelloptions with support for CamelCase words
    " https://github.com/vim/vim/commit/362b44bd4aa87a2aef0f8fd5a28d68dd09a7d909
    set spelloptions+=camel
end
set spellsuggest=5
if g:is_windows
    set spellfile=~/vimfiles/spellfile.utf-8.add
else
    set spellfile=~/.vim/spellfile.utf-8.add
end
" Toggle spell checking with <F7>
nnoremap <silent> <F7> :setlocal spell!<CR><Bar>:echo "Spell check: " . strpart("OffOn", 3 * &spell, 3)<CR>

" Tags files may not be in current directory
if has('path_extra')
    " The ; has special significance see 'help file-searching'.
    setglobal tags-=./tags tags-=./tags; tags^=./tags;
else
    set tags=./tags,./../tags,./../../tags,./../../../tags,tags
end

command! -nargs=0 -bar ReformatFile normal gg=G
command! -nargs=0 -bar ReindentFile ReformatFile

" Add a :Shell command to run a command and read the stdout into a new buffer
command! -nargs=+ -complete=shellcmd Shell 
            \ enew |
            \ setlocal buftype=nofile bufhidden=hide noswapfile |
            \ r !<args>

if has("terminal")
    command! -nargs=* -complete=shellcmd Term rightbelow term ++noclose <args>
    command! -nargs=* -complete=shellcmd Vterm vertical rightbelow term ++noclose <args>
endif

if has("pythonx")
    " Set a preferred python version
    if &pyxversion == 0
        if has("python3")
            set pyxversion=3
        elseif has("python")
            set pyxversion=2
        endif
    endif
    let s:pyinterp = "python" . &pyxversion
    if 0 && &pyxversion > 0 && executable(s:pyinterp)
        " vim on Windows and Mac have broken sys.executable values which point
        " to vim itself not the python interpreter.
        " See https://github.com/davidhalter/jedi-vim/issues/870.
        pythonx sys.executable = vim.eval("exepath(s:pyinterp)")
        pythonx vim.command("VimrcDebug 'sys.executable=%s'" % (sys.executable))
    endif
    unlet s:pyinterp
endif

" --- Wrap mode and file type handling ---

function! s:soft_wrap_enable()
    setlocal wrap linebreak
    setlocal textwidth=0
    " fix up motion keys to move between displayed lines, not real lines
    " ... beginning and end of line ...
    nnoremap <buffer> <silent> $ g$
    nnoremap <buffer> <silent> 0 g0
    vnoremap <buffer> <silent> $ g$
    vnoremap <buffer> <silent> 0 g0
    " ... up and down lines ...
    nnoremap <buffer> <silent> j gj
    nnoremap <buffer> <silent> k gk
    vnoremap <buffer> <silent> j gj
    vnoremap <buffer> <silent> k gk
endfunction
command! -nargs=0 WrapSoft call s:soft_wrap_enable()

function! s:hard_wrap_enable(column)
    call s:wrap_default()
    execute 'setlocal textwidth=' . (a:column > 0 ? a:column : 74)
endfunction
command! -count WrapHard call s:hard_wrap_enable(<count>)

function! s:wrap_default()
    setlocal wrap< linebreak<
    setlocal textwidth<
    try
        " fix up motion keys to move up down displayed lines in the buffer
        " ... beginning and end of line ...
        nunmap <buffer> $
        nunmap <buffer> 0
        vunmap <buffer> $
        vunmap <buffer> 0
        " ... up and down lines ...
        nunmap <buffer> j
        nunmap <buffer> k
        vunmap <buffer> j
        vunmap <buffer> k
    catch
    endtry
endfunction
command! -nargs=0 WrapDefault call s:wrap_default()

function! WrapDescribeForStatusLine()
    return (&wrap && &linebreak) ? "soft"
                \ : (&wrap && &fo =~ "t" && &tw != 0) ? "tw=" . &textwidth
                \ : ""
endfunction

" --- File type handling ---

if has("autocmd")
    function! s:init_markdown()
        setlocal nofoldenable
        setlocal conceallevel=2
        setlocal softtabstop=4
        setlocal shiftwidth=4
    endfunction

    augroup filetype_markdown
        autocmd!
        autocmd FileType markdown call s:init_markdown()
        autocmd FileType mkd      call s:init_markdown()
    augroup end

    " reStructuredText should start unfolded
    augroup filetype_rst
        autocmd!
        autocmd FileType rst setlocal nofoldenable
    augroup END

    " vim files should support folding based on markers, but start unfolded
    augroup filetype_vim
        autocmd!
        autocmd FileType vim setlocal foldmethod=marker nofoldenable
    augroup end

    " Smart dash to EN DASH and EM DASH converstion
    function! s:smartdashes()
        iab <buffer> -- <c-k>n-
        iab <buffer> ~~ <c-k>m-
    endfunction

    " use soft wrap for text-like files
    function s:init_textlike()
        call s:smartdashes()
        setlocal spell
        WrapSoft
    endfunction

    augroup filetype_textlike
        autocmd!
        autocmd FileType markdown  call s:init_textlike()
        autocmd FileType mkd       call s:init_textlike()
        autocmd FileType mediawiki call s:init_textlike()
        autocmd FileType rst       call s:init_textlike()
        autocmd FileType text      call s:init_textlike()
    augroup end

    " Open the quickfix or location line window after any grep command
    augroup quickfix_mapping
        autocmd!
        autocmd QuickFixCmdPost grep*,*[^l]grep* copen | redraw!
        autocmd QuickFixCmdPost *lgrep* lopen | redraw!
    augroup end

    " Reset path as the ruby ftplugin will change it to the ruby load path
    augroup filetype_ruby
        autocmd!
        autocmd FileType ruby setlocal path=.,,**
    augroup end

    " Change tab stops for shell code
    augroup filetype_shell
        autocmd!
        autocmd FileType sh setlocal softtabstop=4 shiftwidth=4
    augroup end
endif " has autocmd

" --- other vimrc files ---

" This needs to be at file scope, otherwise it returns a pathname ending
" .../function which isn't helpful.
let s:vimrc = resolve(expand("<sfile>:p"))

function! s:load_vimrc_extras()
    let l:scripts = resolve(fnamemodify(s:vimrc, ":h"))
    let l:after = l:scripts . '/after'
    execute 'set rtp+=' . l:scripts
    runtime! startup/plugins.vim
    runtime! startup/*.vim
    execute 'set rtp+=' . l:after
endfunction
call s:load_vimrc_extras()

" --- local options ---

let s:vimrc_local = g:is_windows ?
            \ "$USERPROFILE/vimfiles/vimrc.local" :
            \ "$HOME/.vimrc.local"
call s:source_if_readable(s:vimrc_local)
